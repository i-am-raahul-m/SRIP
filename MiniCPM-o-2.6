{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true},"colab":{"provenance":[{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/iamraahulm/minicpm-v.0f5de12b-6867-4524-b00c-437a85a03d96.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20250613/auto/storage/goog4_request&X-Goog-Date=20250613T055500Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=6adfea35fd21a126f02d8dfff9ed40aa3a7ef854e04c63d5a8bdf26380a2f56467e69c80deb25c2a19641ebd4b2fa28cbdaab762a6280f233d55db7edee970f676b22ebe068938f6d475982c1d6fd0f076d2c7efaf4d99effbce8541b923a2f065a8164dff2fdc4e1aba0ee63b777007d39b3ac4d66ad820e4a986bffb8c7e7ba663dbb11640346273337cc02bf19d02965ac792a9ec7e34a0e2a6d8368d3cbc774bb497bf87a34b804e234fe99d0badc811c4f500849203bdcc00a31acf717626a1abd884da8afd7023e721e5037e8b0aeaae53e796ea2423b5a346d076143668becb0102ebb3fa01a802d956e8626bffe48fa115b2a26da402184235051be0","timestamp":1749794120349}]}},"nbformat_minor":0,"nbformat":4,"cells":[{"cell_type":"code","source":["!pip install -r requirements.txt"],"metadata":{"_kg_hide-output":true,"trusted":true,"id":"mHBjJ1MC2xu9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import torch\n","from PIL import Image\n","from transformers import AutoModel, AutoTokenizer\n","\n","# load omni model default, the default init_vision/init_audio/init_tts is True\n","# if load vision-only model, please set init_audio=False and init_tts=False\n","# if load audio-only model, please set init_vision=False\n","model = AutoModel.from_pretrained(\n","    'openbmb/MiniCPM-o-2_6',\n","    trust_remote_code=True,\n","    attn_implementation='sdpa', # sdpa or flash_attention_2\n","    torch_dtype=torch.bfloat16,\n","    init_vision=True,\n","    init_audio=False,\n","    init_tts=False\n",")\n","\n","model = model.eval().cuda()\n","tokenizer = AutoTokenizer.from_pretrained('openbmb/MiniCPM-o-2_6', trust_remote_code=True)"],"metadata":{"_kg_hide-output":true,"trusted":true,"id":"u_VdW89q2xu_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import math\n","import numpy as np\n","from PIL import Image\n","from moviepy.editor import VideoFileClip\n","\n","def get_video_chunk_content(video_path, flatten=True):\n","    video = VideoFileClip(video_path)\n","    print('video_duration:', video.duration)\n","\n","    num_units = math.ceil(video.duration)\n","\n","    # 1 frame per second\n","    contents = []\n","    for i in range(num_units):\n","        frame = video.get_frame(i + 1)\n","        image = Image.fromarray(frame.astype(np.uint8))\n","        if flatten:\n","            contents.extend([\"<unit>\", image])\n","        else:\n","            contents.append([\"<unit>\", image])\n","\n","    return contents\n","\n","video_path = \"attention.mp4\"\n","\n","# Use default system prompt (no audio conditioning)\n","sys_msg = model.get_sys_prompt(mode='vision', language='en')\n","\n","contents = get_video_chunk_content(video_path)\n","msg = {\"role\": \"user\", \"content\": contents}\n","msgs = [sys_msg, msg]\n","\n","res = model.chat(\n","    msgs=msgs,\n","    tokenizer=tokenizer,\n","    sampling=True,\n","    temperature=0.5,\n","    max_new_tokens=4096,\n","    omni_input=True,\n","    use_tts_template=False,\n","    generate_audio=False,\n","    max_slice_nums=1,\n","    use_image_id=False,\n","    return_dict=True\n",")\n","\n","print(res)"],"metadata":{"id":"fTIYa5If9Evs"},"execution_count":null,"outputs":[]}]}